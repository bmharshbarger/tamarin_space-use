#### Tamarin data exploration ####
ba <- read.csv("data-raw/group_ba.csv")
ph <- read.csv("data-raw/group_ph.csv")
lc <- read.csv("data-raw/group_lc.csv")
library(so)
library(sp)
library(sf)
# convert to sf object
ba_sf <- st_as_sf(ba, coords = c("LON", "LAT"))
ph_sf <- st_as_sf(ph, coords = c("LON", "LAT"))
lc_sf <- st_as_sf(lc, coords = c("LON", "LAT"))
View(lc)
# remove NA from lc data frame
na.omit(lc$LAT)
# remove NA from lc data frame
test <- na.omit(lc$LAT)
# remove NA from lc data frame
test <- na.omit(lc)
View(test)
library(tidyr)
# remove NA from lc data frame
test <- lc %>% drop_na(LAT)
View(test)
# remove NA from lc data frame
lc <- lc %>% drop_na(LAT)
lc_sf <- st_as_sf(lc, coords = c("LON", "LAT"))
utm_proj <- sf::st_crs("+proj=utm +zone=12 +datum=WGS84")
ba_utm <- st_transform(ba_sf, crs = utm_proj)
crs(ba_sf)
st_crs(ba_sf)
#### Tamarin data exploration ####
library(sf)
library(tidyr)
ba <- read.csv("data-raw/group_ba.csv")
ph <- read.csv("data-raw/group_ph.csv")
lc <- read.csv("data-raw/group_lc.csv")
View(ba)
##### Database building ----
library(DBI)
my_db <- dbConnect(RSQLite::SQLite(), "my_db.db") # establish database connection
View(my_db)
group_lc <- read.csv("data-raw/group_lc_habitat.csv")
View(group_lc)
group_ph <- read.csv("data-raw/group_ph_habitat.csv")
gorup_ba <- read.csv("data-raw/group_ba_habitat.csv")
group_ba <- read.csv("data-raw/group_ba_habitat.csv")
my_db <- dbConnect(RSQLite::SQLite(), "my_db.db") # establish database connection
group_lc <- read.csv("data-raw/group_lc_habitat.csv") # read in csv files
group_ph <- read.csv("data-raw/group_ph_habitat.csv")
group_ba <- read.csv("data-raw/group_ba_habitat.csv")
class(group_lc)
groups <- cbind(group_lc, group_ph, group_ba)
groups <- rbind(group_lc, group_ph, group_ba)
View(group_ba)
View(group_ph)
View(group_ba)
group_lc <- read.csv("data-raw/group_lc_habitat.csv") # read in csv files
group_ph <- read.csv("data-raw/group_ph_habitat.csv")
group_ba <- read.csv("data-raw/group_ba_habitat.csv")
?cbind
groups <- cbind(group_lc, group_ph, group_ba)
groups <- rbind(group_lc, group_ph, group_ba)
View(groups)
groups$Canopy.Level.Code
groups_1 <- na.omit(groups)
View(groups_1)
groups_1$Height.Verbatim
groups_1$Height.Code
groups_1$Canopy.Level...Verbatim
groups_1$Canopy.Level.Code
?as.POSIXlt()
View(groups_1)
library(dplyr)
# now I want to merge the date time column
groups_1 <- groups_1 %>%
mutate(date-time = as.POSIXct(paste(Date, Time)),
format("%Y-%m-%d %H:%M:%OS"))
# now I want to merge the date time column
groups_1 <- groups_1 %>%
mutate(date-time = as.POSIXct(paste(Date, Time),
format("%Y-%m-%d %H:%M:%OS")))
# now I want to merge the date time column
groups_1 <- groups_1 %>%
mutate(date-time = as.POSIXct(paste(Date, Time),
format = "%Y-%m-%d %H:%M:%OS"))
# now I want to merge the date time column
groups_1 <- groups_1 %>%
mutate(date-time = as.POSIXct(paste(Date, Time),
format = "%Y-%m-%d %H:%M:%OS"))
# now I want to merge the date time column
groups_1 <- groups_1 %>%
mutate(date_time = as.POSIXct(paste(Date, Time),
format = "%Y-%m-%d %H:%M:%OS"))
View(groups_1)
# now I want to merge the date time column
groups_1 <- groups_1 %>%
mutate(date_time = as.POSIXct(paste(Date, Time),
format = "%Y-%m-%d %H:%M"))
View(groups_1)
# now I want to merge the date time column
groups_1 <- groups_1 %>%
mutate(date_time = as.POSIXct(paste(Date, Time),
format = "%Y/%m/%d %H:%M"))
View(groups_1)
# now I want to merge the date time column
groups_1 <- groups_1 %>%
mutate(date_time = as.POSIXct(paste(Date, Time),
format = "%m/%d/%Y %H:%M"))
View(groups_1)
View(groups_1)
View(groups_1)
groups_1 <- groups_1[-2]
View(groups_1)
group_lc <- read.csv("data-raw/group_lc_habitat.csv") # read in csv files
group_ph <- read.csv("data-raw/group_ph_habitat.csv")
group_ba <- read.csv("data-raw/group_ba_habitat.csv")
groups <- rbind(group_lc, group_ph, group_ba) # combine into 1 data frame
groups_1 <- na.omit(groups)
groups_1 <- groups_1 %>% # merge date time columns
mutate(date_time = as.POSIXct(paste(Date, Time),
format = "%m/%d/%Y %H:%M"))
groups_1 <- groups_1[c(-2, -3)]
View(groups_1)
?rename
groups_1 <- rename(groups_1, group = Group, waypoint = Waypoint, lat = LAT,
lon = LON, habitat = Habitat, boundary_1 = Boundary,
boundary_2 = Boundary.2, height = Height.Verbatim,
height_code = Height.Code, canopy_level = Canopy.Level...Verbatim,
canopy_level_code = Canopy.Level.Code)
View(groups_1)
unique(groups_1$boundary_1)
unique(groups_1$boundary_2)
dbExecute(tamarin_db, "CREATE TABLE tamarin (
group varchar(3) NOT NULL,
waypoint integer,
lat integer,
lon integer,
habitat varchar,
boundary_1 varchar,
boundary_2 varchar,
height varchar,
height_code integer,
canopy_level varchar,
canopy_level_code integer,
date_time datetime,
);")
?dbExecute
dbExecute(my_db, "CREATE TABLE tamarin (
group varchar(3) NOT NULL,
waypoint integer,
lat integer,
lon integer,
habitat varchar,
boundary_1 varchar,
boundary_2 varchar,
height varchar,
height_code integer,
canopy_level varchar,
canopy_level_code integer,
date_time datetime,
);")
dbExecute(my_db, "CREATE TABLE tamarin (
group varchar,
waypoint integer,
lat integer,
lon integer,
habitat varchar,
boundary_1 varchar,
boundary_2 varchar,
height varchar,
height_code integer,
canopy_level varchar,
canopy_level_code integer,
date_time datetime,
);")
View(groups_1)
dbWriteTable(my_db, "groups_1")
?`dbWriteTable,SQLiteConnection,character,character-method`
dbWriteTable(my_db, name = "tamarin", value = groups_1)
names(groups_1)
dbExecute(my_db, "CREATE TABLE tamarin (
group varchar(7)
waypoint integer,
lat integer,
lon integer,
habitat varchar,
boundary_1 varchar,
boundary_2 varchar,
height varchar,
height_code integer,
canopy_level varchar,
canopy_level_code integer,
date_time datetime);")
unique(group)
unique(groups_1$group)
unique(groups_1$habitat)
dbExecute(my_db, "CREATE TABLE tamarin(
group CHAR(2) NOT NULL,
waypoint VARCHAR(4) NOT NULL,
lat CHAR(7) NOT NULL,
lon CHAR(7) NOT NULL,
habitat VARCHAR(10),
boundary_1 VARCHAR(10),
boundary_2 VARCHAR(10),
height VARCHAR(10),
height_code VARCHAR(10),
canopy_level VARCHAR(10),
canopy_level_code VARCHAR(5),
date_time VARCHAR(20),
PRIMARY KEY (datetime)
);"
)
dbDisconnect(my_db)
my_db <- dbConnect(RSQLite::SQLite(), "my_db.db") # establish database connection
dbExecute(my_db, "CREATE TABLE tamarin(
group CHAR(2) NOT NULL,
waypoint VARCHAR(4) NOT NULL,
lat CHAR(7) NOT NULL,
lon CHAR(7) NOT NULL,
habitat VARCHAR(10),
boundary_1 VARCHAR(10),
boundary_2 VARCHAR(10),
height VARCHAR(10),
height_code VARCHAR(10),
canopy_level VARCHAR(10),
canopy_level_code VARCHAR(5),
date_time VARCHAR(20),
PRIMARY KEY (datetime)
);"
)
dbExecute(my_db, "CREATE TABLE tamarin(
group VARCHAR(2) NOT NULL,
waypoint VARCHAR(4) NOT NULL,
lat CHAR(7) NOT NULL,
lon CHAR(7) NOT NULL,
habitat VARCHAR(10),
boundary_1 VARCHAR(10),
boundary_2 VARCHAR(10),
height VARCHAR(10),
height_code VARCHAR(10),
canopy_level VARCHAR(10),
canopy_level_code VARCHAR(5),
date_time VARCHAR(20),
PRIMARY KEY (datetime)
);"
)
dbExecute(my_db, "CREATE TABLE tamarin(
group VARCHAR(2) NOT NULL,
waypoint VARCHAR(4) NOT NULL,
lat CHAR(7) NOT NULL,
lon CHAR(7) NOT NULL,
habitat VARCHAR(10),
boundary_1 VARCHAR(10),
boundary_2 VARCHAR(10),
height VARCHAR(10),
height_code VARCHAR(10),
canopy_level VARCHAR(10),
canopy_level_code VARCHAR(5),
date_time VARCHAR(20),
PRIMARY KEY (datetime)
);"
)
dbExecute(my_db, "CREATE TABLE tamarin(
waypoint VARCHAR(4) NOT NULL,
lat CHAR(7) NOT NULL,
lon CHAR(7) NOT NULL,
habitat VARCHAR(10),
boundary_1 VARCHAR(10),
boundary_2 VARCHAR(10),
height VARCHAR(10),
height_code VARCHAR(10),
canopy_level VARCHAR(10),
canopy_level_code VARCHAR(5),
date_time VARCHAR(20),
PRIMARY KEY (datetime)
);"
)
dbExecute(my_db, "CREATE TABLE tamarin(
group VARCHAR(2) NOT NULL,
waypoint VARCHAR(4) NOT NULL,
lat CHAR(7) NOT NULL,
lon CHAR(7) NOT NULL,
habitat VARCHAR(10),
boundary_1 VARCHAR(10),
boundary_2 VARCHAR(10),
height VARCHAR(10),
height_code VARCHAR(10),
canopy_level VARCHAR(10),
canopy_level_code VARCHAR(5),
date_time VARCHAR(20),
PRIMARY KEY (date_time)
);"
)
group_lc <- read.csv("data-raw/group_lc_habitat.csv") # read in csv files
group_ph <- read.csv("data-raw/group_ph_habitat.csv")
group_ba <- read.csv("data-raw/group_ba_habitat.csv")
groups <- rbind(group_lc, group_ph, group_ba) # combine into 1 data frame
groups_1 <- na.omit(groups)
groups_1 <- groups_1 %>% # merge date time columns
mutate(date_time = as.POSIXct(paste(Date, Time),
format = "%m/%d/%Y %H:%M"))
groups_1 <- groups_1[c(-2, -3)] # remove date and time columns
groups_1 <- rename(groups_1, group_id = Group, waypoint = Waypoint, lat = LAT,
lon = LON, habitat = Habitat, boundary_1 = Boundary,
boundary_2 = Boundary.2, height = Height.Verbatim,
height_code = Height.Code, canopy_level = Canopy.Level...Verbatim,
canopy_level_code = Canopy.Level.Code)
##### Database building ----
library(DBI)
library(dplyr)
group_lc <- read.csv("data-raw/group_lc_habitat.csv") # read in csv files
group_ph <- read.csv("data-raw/group_ph_habitat.csv")
group_ba <- read.csv("data-raw/group_ba_habitat.csv")
groups <- rbind(group_lc, group_ph, group_ba) # combine into 1 data frame
groups_1 <- na.omit(groups)
groups_1 <- groups_1 %>% # merge date time columns
mutate(date_time = as.POSIXct(paste(Date, Time),
format = "%m/%d/%Y %H:%M"))
groups_1 <- groups_1[c(-2, -3)] # remove date and time columns
groups_1 <- rename(groups_1, group_id = Group, waypoint = Waypoint, lat = LAT,
lon = LON, habitat = Habitat, boundary_1 = Boundary,
boundary_2 = Boundary.2, height = Height.Verbatim,
height_code = Height.Code, canopy_level = Canopy.Level...Verbatim,
canopy_level_code = Canopy.Level.Code)
my_db <- dbConnect(RSQLite::SQLite(), "my_db.db") # establish database connection
dbExecute(my_db, "CREATE TABLE tamarin(
group VARCHAR(2) NOT NULL,
waypoint VARCHAR(4) NOT NULL,
lat CHAR(7) NOT NULL,
lon CHAR(7) NOT NULL,
habitat VARCHAR(10),
boundary_1 VARCHAR(10),
boundary_2 VARCHAR(10),
height VARCHAR(10),
height_code VARCHAR(10),
canopy_level VARCHAR(10),
canopy_level_code VARCHAR(5),
date_time VARCHAR(20),
PRIMARY KEY (date_time)
);"
)
dbExecute(my_db, "CREATE TABLE tamarin(
group_id VARCHAR(2) NOT NULL,
waypoint VARCHAR(4) NOT NULL,
lat CHAR(7) NOT NULL,
lon CHAR(7) NOT NULL,
habitat VARCHAR(10),
boundary_1 VARCHAR(10),
boundary_2 VARCHAR(10),
height VARCHAR(10),
height_code VARCHAR(10),
canopy_level VARCHAR(10),
canopy_level_code VARCHAR(5),
date_time VARCHAR(20),
PRIMARY KEY (date_time)
);"
)
dbGetQuery(my_db, "SELECT * FROM tamarin LIMIT 10;")
dbWriteTable(my_db, "tamarin", groups_1, append = TRUE)
View(groups_1)
groups_1$unique_id <- 1:nrow(groups_1)
head(groups_1)
dbDisconnect()
my_db <- dbConnect(RSQLite::SQLite(), "my_db.db") # establish database connection
dbExecute(my_db, "CREATE TABLE tamarin(
unique_id VARCHAR(5) NOT NULL,
group_id VARCHAR(2) NOT NULL,
waypoint VARCHAR(4) NOT NULL,
lat CHAR(7) NOT NULL,
lon CHAR(7) NOT NULL,
habitat VARCHAR(10),
boundary_1 VARCHAR(10),
boundary_2 VARCHAR(10),
height VARCHAR(10),
height_code VARCHAR(10),
canopy_level VARCHAR(10),
canopy_level_code VARCHAR(5),
date_time VARCHAR(20),
PRIMARY KEY (unique_id)
);"
)
dbExecute(my_cb, "DROP TABLE tamarin;")
my_db <- dbConnect(RSQLite::SQLite(), "my_db.db") # establish database connection
dbExecute(my_db, "DROP TABLE tamarin;")
dbExecute(my_db, "CREATE TABLE tamarin(
unique_id VARCHAR(5) NOT NULL,
group_id VARCHAR(2) NOT NULL,
waypoint VARCHAR(4) NOT NULL,
lat CHAR(7) NOT NULL,
lon CHAR(7) NOT NULL,
habitat VARCHAR(10),
boundary_1 VARCHAR(10),
boundary_2 VARCHAR(10),
height VARCHAR(10),
height_code VARCHAR(10),
canopy_level VARCHAR(10),
canopy_level_code VARCHAR(5),
date_time VARCHAR(20),
PRIMARY KEY (unique_id)
);"
)
dbGetQuery(my_db, "SELECT * FROM tamarin LIMIT 10;")
dbWriteTable(my_db, "tamarin", groups_1, append = TRUE)
dbGetQuery(my_db, "SELECT * FROM tamarin LIMIT 10;")
